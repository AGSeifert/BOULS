library(devtools)
use_package("xcms")
use_package("MSnbase")
use_package("utils")
use_package("BiocParallel")
use_package("SummarizedExperiment")
use_r("loadRData")
devtools::load_all(".")
devtools::load_all(".")
?loadRData
?loadRData
use_r()
use_r("importmzMLs")
use_r("preparemzMLs")
use_r("prepare.mzMLs")
library(devtools)
use_r("prepare.mzMLs")
use_r("prepare_mzMLs")
devtools::load_all(".")
pd <- read.csv2("/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
View(pd)
pd <- read.csv("/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
View(pd)
pd <- rbind(pd, c("Ref.mzML", 2022, "Ref", "Ref", "positiv", "Ref", "Ref"))
devtools::load_all(".")
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",)
devtools::load_all(".")
?prepare_mzMLs
library(SOULS)
?prepare_mzMLs
??prepare_mzMLs
?loadRData
?prepare_mzMLs
devtools::load_all(".")
?prepare_mzMLs
pd <- read.csv("/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
View(pd)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
View(pd)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
## load mzMLs
mzMLs <- list.files("/media/hansen/AUTHENTISH/mzMLs/Samples", full.names = TRUE, recursive = TRUE)
## load mzML file of reference sample for retention time alignment
mzMLs_Ref <- list.files("/media/hansen/AUTHENTISH/mzMLs/Reference", full.names = TRUE, recursive = TRUE)
## assembling of sample and reference mzMLs (last sample)
mzMLs <- c(mzMLs, mzMLs_Ref[index_ref])
## assembling of sample and reference mzMLs (last sample)
mzMLs <- c(mzMLs, mzMLs_Ref[1])
devtools::load_all(".")
library(SOULS)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
?prepare_mzMLs
library(SOULS)
?prepare_mzMLs
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
View(raw_data)
raw_data@featureData@varMetadata
bpis <- chromatogram(raw_data, aggregationFun = "max")
bpis <- xcms::chromatogram(raw_data, aggregationFun = "max")
library(devtools)
library(SOULS)
use_package("xcms")
library(SOULS)
devtools::load_all(".")
pd <- read.csv("/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
pd <- rbind(pd, c("Ref.mzML", 2022, "Ref", "Ref", "positiv", "Ref", "Ref"))
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
library(SOULS)
pd <- read.csv("/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
pd <- rbind(pd, c("Ref.mzML", 2022, "Ref", "Ref", "positiv", "Ref", "Ref"))
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
## load mzMLs
mzMLs <- list.files("/media/hansen/AUTHENTISH/mzMLs/Samples", full.names = TRUE, recursive = TRUE)
library(SOULS)
devtools::load_all(".")
library(SOULS)
pd <- read.csv("/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
pd <- rbind(pd, c("Ref.mzML", 2022, "Ref", "Ref", "positiv", "Ref", "Ref"))
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
raw_data
raw_data
library(xcms)
spectra(raw_data)
devtools::load_all(".")
library(SOULS)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
# data inspection (https://www.bioconductor.org/packages/devel/bioc/vignettes/xcms/inst/doc/xcms.html#2_Data_import)
raw_data
spectra(raw_data)
xcms::spectra(raw_data)
library(SOULS)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
# data inspection (https://www.bioconductor.org/packages/devel/bioc/vignettes/xcms/inst/doc/xcms.html#2_Data_import)
raw_data
#library(xcms)
MSnbase::spectra(raw_data)
# Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/media/hansen/AUTHENTISH/mzMLs/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/media/hansen/AUTHENTISH/mzMLs/Reference", full.names = TRUE, recursive = TRUE)
mzMLs <- c(mzMLs, mzMLs_Ref[1])
pd <- read.csv("/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
## add reference sample to the pd (last row)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
raw_data <- MSnbase::readMSData(
files = mzMLs,
pdata = new("NAnnotatedDataFrame", pd),
mode = "onDisk"
)
raw_data
xcms::spectra(raw_data)
library(SOULS)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
table(xcms::fromFile(raw_data))
# data inspection (https://www.bioconductor.org/packages/devel/bioc/vignettes/xcms/inst/doc/xcms.html#2_Data_import)
## spectra Funktion auslassen, funktioniert nicht auf dem Laptop, weil Arbeitsspeicher und Zwischenspeicher voll laufen, die Funktion ist auch nicht so wertvoll
library(xcms)
library(MSnbase)
table(fromFile(raw_data))
sampleData(raw_data)
library(MsExperiment)
install.packages("MsExperiment")
BiocManager::install("MsExperiment")
BiocManager::install(version = '3.17')
BiocManager::install(version = '3.17')
BiocManager::install("MsExperiment")
BiocManager::install("MsExperiment",  lib = "/home/hansenju/R/x86_64-pc-linux-gnu-library/3.6")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
sampleData(raw_data)
bpis <- chromatogram(raw_data, aggregationFun = "max")
library(SOULS)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
bpis <- chromatogram(raw_data,
rt = c(300, 600)
aggregationFun = "max")
bpis <- chromatogram(raw_data,
rt = c(300, 600),
aggregationFun = "max")
bpis <- xcms::chromatogram(raw_data,
rt = c(300, 600),
aggregationFun = "max")
library(RColorBrewer)
plot(bpis)
# data inspection (https://www.bioconductor.org/packages/devel/bioc/vignettes/xcms/inst/doc/xcms.html#2_Data_import)
## spectra Funktion auslassen, funktioniert nicht auf dem Laptop, weil Arbeitsspeicher und Zwischenspeicher voll laufen, die Funktion ist auch nicht so wertvoll
library(xcms)
chromPeaks(bpis)
xcms::chromPeaks(bpis)
plot(bpis, col =1)
plot(bpis, col =1:3)
raw_data
raw_data@phenoData@data$Name
plot(bpis, col =1:3)
legend(1, 95, legend=raw_data@phenoData@data$Name,
col=1:3, lty=1:2, cex=0.8)
legend("upperleft", legend=c(raw_data@phenoData@data$Name),
col=1:3, lty=1:2, cex=0.8)
plot(bpis, col =1:3)
legend("upperleft", legend=c(raw_data@phenoData@data$Name),
col=1:3, lty=1:2, cex=0.8)
plot(bpis, col =1:3)
legend("topleft", legend=c(raw_data@phenoData@data$Name),
col=1:3, lty=1:2, cex=0.8)
1:length(raw_data@phenoData@data$Name)
plot(bpis, col =1:length(raw_data@phenoData@data$Name))
legend("topleft", legend=c(raw_data@phenoData@data$Name),
col=1:length(raw_data@phenoData@data$Name), lty=1:2, cex=0.8)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs/phenodata.csv")
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
# mzMLs <- list.files("/media/hansen/AUTHENTISH/mzMLs/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/media/hansen/AUTHENTISH/mzMLs_section/Reference", full.names = TRUE, recursive = TRUE)
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/media/hansen/AUTHENTISH/mzMLs_section/Samples", full.names = TRUE, recursive = TRUE)
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
raw_data <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
library(SOULS)
xdata <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
library(SOULS)
xdata <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
devtools::load_all(".")
xdata_adj <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
devtools::load_all(".")
xdata_adj <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
pd <- read.csv("/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
View(pd)
## add reference sample to the pd (last row)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
index.ref <- which(pd$name == "Ref.mzML")
index.ref <- which(pd$Name == "Ref.mzML")
devtools::load_all(".")
xdata_adj <- prepare_mzMLs(path_mzMLs = "/media/hansen/AUTHENTISH/mzMLs_section/Samples",path_Ref = "/media/hansen/AUTHENTISH/mzMLs_section/Reference", pd_csv = "/media/hansen/AUTHENTISH/mzMLs_section/phenodata.csv")
?prepare_mzMLs
?prepare_mzMLs
use_r("souls")
library(devtools)
use_r("souls")
mzMLs <- list.files("/media/hansen/AUTHENTISH/mzMLs_section/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/media/hansen/AUTHENTISH/mzMLs_section/Reference", full.names = TRUE, recursive = TRUE)
mzMLs <- c(mzMLs, mzMLs_Ref[1])
usethis::use_data_raw(name = "mzmLs")
use_r("data")
install.packages("sinew")
sinew::makeOxygen(mzMLs, add_fields = "source")
mzMLs <- list.files("/media/hansen/AUTHENTISH/mzMLs_section/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/media/hansen/AUTHENTISH/mzMLs_section/Reference", full.names = TRUE, recursive = TRUE)
mzMLs <- c(mzMLs, mzMLs_Ref[1])
sinew::makeOxygen(mzMLs, add_fields = "source")
use_package("Rcpp")
devtools::load_all(".")
library(SOULS)
library(SOULS)
library(SOULS)
xdata_adj <- prepare_mzMLs(path_mzMLs = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples",
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
xdata_adj <- prepare_mzMLs(path_mzMLs = list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples"),
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
xdata_adj <- prepare_mzMLs(path_mzMLs = list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE),
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML", full.names = TRUE, recursive = TRUE)
mzMLs <- c(mzMLs, mzMLs_Ref[1])
pd <- read.csv("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
## add reference sample to the pd (last row)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
raw_data <- MSnbase::readMSData(
files = mzMLs,
pdata = new("NAnnotatedDataFrame", pd),
mode = "onDisk"
)
mzMLs
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE)
xdata_adj <- prepare_mzMLs(path_mzMLs = list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE),
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML", full.names = TRUE, recursive = TRUE)
mzMLs <- c(mzMLs, mzMLs_Ref[1])
mzMLs_Ref <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML")
mzMLs_Ref <- "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML"
mzMLs <- c(mzMLs, mzMLs_Ref[1])
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML"
mzMLs <- c(mzMLs, mzMLs_Ref[1])
pd <- read.csv("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
## add reference sample to the pd (last row)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
raw_data <- MSnbase::readMSData(
files = mzMLs,
pdata = new("NAnnotatedDataFrame", pd),
mode = "onDisk"
)
raw_data
library(SOULS)
xdata_adj <- prepare_mzMLs(path_mzMLs = list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE),
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
pd <- read.csv("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
## add reference sample to the pd (last row)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
index.ref <- which(pd$Name == "Ref.mzML")
# Peak picking settings
cwp <- xcms::CentWaveParam(
peakwidth = c(5, 20),
noise = 100,
ppm = 5,
snthresh = 5
)
# Peak detection
xdata <- xcms::findChromPeaks(raw_data, param = cwp)
library(SOULS)
xdata_adj <- prepare_mzMLs(path_mzMLs = list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE),
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
# data inspection (https://www.bioconductor.org/packages/devel/bioc/vignettes/xcms/inst/doc/xcms.html#2_Data_import)
## spectra Funktion auslassen, funktioniert nicht auf dem Laptop, weil Arbeitsspeicher und Zwischenspeicher voll laufen, die Funktion ist auch nicht so wertvoll
library(xcms)
library(MSnbase)
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML"
mzMLs <- c(mzMLs, mzMLs_Ref[1])
pd <- read.csv("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
## add reference sample to the pd (last row)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
raw_data <- MSnbase::readMSData(
files = mzMLs,
pdata = new("NAnnotatedDataFrame", pd),
mode = "onDisk"
)
raw_data
# Peak picking settings
cwp <- xcms::CentWaveParam(
peakwidth = c(5, 20),
noise = 100,
ppm = 5,
snthresh = 5
)
# Peak detection
xdata <- xcms::findChromPeaks(raw_data, param = cwp)
index.ref <- which(pd$Name == "Ref.mzML")
#xdata_adj <-
xcms::adjustRtime(xdata,
param = xcms::ObiwarpParam(
binSize = 0.1,
centerSample = index.ref,
localAlignment = TRUE,
distFun = "cor_opt"
)
)
xdata_adj <- prepare_mzMLs(path_mzMLs = list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE),
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
# #library(xcms)
# MSnbase::spectra(raw_data)
#
# # Funktionen einzeln ausprobieren: Liegt es an den Daten oder an der Funktion?
mzMLs <- list.files("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples", full.names = TRUE, recursive = TRUE)
mzMLs_Ref <- "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML"
mzMLs <- c(mzMLs, mzMLs_Ref[1])
pd <- read.csv("/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
## add reference sample to the pd (last row)
pd <- rbind(pd, c("Ref.mzML", rep("Ref",times = ncol(pd)-1)))
#xdata_adj <-
xcms::adjustRtime(xdata,
param = xcms::ObiwarpParam(
binSize = 0.1,
centerSample = index.ref,
localAlignment = TRUE,
distFun = "cor_opt"
)
)
xdata_adj <- prepare_mzMLs(path_mzMLs = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples",
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
library(SOULS)
xdata_adj <- prepare_mzMLs(path_mzMLs = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples",
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
souls()
devtools::load_all(".")
souls()
devtools::load_all(".")
seg.result <- souls(RT_range = c(300, 360), size_RT_segs = 10, mz_range =  c(25, 1000), size_mz_segs =  5, xdata_adj = xdata_adj)
options(MulticoreParam = MulticoreParam(workers = 1))
# RT segsize
runtime <- c(300, 360)
seg.size.rt <- 10
# mz segsize
seg.range.mz <- c(25, 1000) #c(100, 1500)
seg.size.mz <- 5 #2
seg.rt <- dif(runtime) / seg.size.rt # seg.rt = number of RT segs
seg.rt <- diff(runtime) / seg.size.rt # seg.rt = number of RT segs
runtime[1]
runtime[2]
seg.rt.list <- as.list(seq(from = runtime[1], to = (runtime[2] - seg.size.rt), by = seg.size.rt))
names(seg.rt.list) <- seq(from = runtime[1], to = (runtime[2] - seg.size.rt), by = seg.size.rt)
seg.mz <- diff(seg.range.mz) / seg.size.mz # seg.mz = number of mz segs
seg.mz.list <- as.list(seq(from = seg.range.mz[1], to = (seg.range.mz[2] - seg.size.mz), by = seg.size.mz))
names(seg.mz.list) <- seq(from = seg.range.mz[1], to = (seg.range.mz[2] - seg.size.mz), by = seg.size.mz)
seg.mz.list <- lapply(seg.mz.list, function(mz) {
mz <- c(mz, mz + seg.size.mz)
})
seg.result <- bplapply(seg.mz.list, function(mz.seg) {
TIC <- xcms::chromatogram(xdata_adj,
mz = as.vector(mz.seg),
aggregationFun = "sum"
)
lapply(seg.rt.list, function(rt.seg) {
apply(TIC, 2, function(TIC_x) {
sum(TIC_x[[1]]@intensity[which(dplyr::between(TIC_x[[1]]@rtime, rt.seg, (rt.seg + seg.size.rt)) == TRUE)], na.rm = TRUE)
})
}) # End lapply seg.rt.list
}) # End of bplapply mz
# Creating a matrix with the results
result.unlist <- unlist(seg.result)
number.segs <- (runtime / seg.size.rt) * ((seg.range.mz[2] - seg.range.mz[1]) / seg.size.mz)
number.segs <- (diff(runtime) / seg.size.rt) * ((seg.range.mz[2] - seg.range.mz[1]) / seg.size.mz)
6*195
segdata <- matrix(result.unlist, nrow = number.segs, ncol = nrow(pd), byrow = TRUE)
segdata <- matrix(result.unlist, nrow = number.segs, ncol = 3 , byrow = TRUE) #ncol = nrow(pd)
colnames(segdata) <- basename(fileNames(xdata_adj))
View(segdata)
prefix <- rep(names(seg.rt.list), times = length(seg.mz.list))
suffix <- rep(names(seg.mz.list), each = length(seg.rt.list))
rownames(segdata) <- paste0(prefix, sep = ".", suffix)
devtools::load_all(".")
seg.result.1 <- souls()
library(SOULS)
seg.result.1 <- souls()
devtools::load_all(".")
xdata_adj <- prepare_mzMLs(path_mzMLs = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples",
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
pd_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
seg.result.1 <- souls()
seg.result.1 <- souls(xdata_adj = xdata_adj)
library(BiocParallel, lib.loc = "/usr/local/lib/R/site-library")
BiocParallel::MulticoreParam()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(SOULS)
devtools::load_all(".")
devtools::load_all(".")
library(SOULS)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
SOULS::souls()
?souls
devtools::load_all(".")
?souls
seg.result <- SOULS::souls(path_mzMLs = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/Samples",
path_Ref = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/20220208-0008-Referenzsaft AuthentiSH.mzML",
path_csv = "/home/hansen/dokumente/honey-authentication-jule/subprojects/SOULS/phenodata.csv")
seg.result
